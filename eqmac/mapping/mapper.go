//go:generate mockgen -package mapping -source=mapper.go -destination mapper_mock.go

package mapping

import (
	"github.com/indiependente/autoEqMac/autoeq"
	"github.com/indiependente/autoEqMac/eqmac"
)

// UUIDGenerator defines the behavior of a component capable of creating a new UUID.
type UUIDGenerator interface {
	UUID() string
}

// WrappedGenerator is used to turn a function that returns a string into a UUIDGenerator.
type WrappedGenerator func() string

// UUID returns the uuid generated by the WrappedGenerator.
func (g WrappedGenerator) UUID() string {
	return g()
}

// Mapper defines the behavior of a component capable of mapping AutoEQ data into EqMac format.
type Mapper interface {
	MapFixedBand(*autoeq.FixedBandEQ, *autoeq.EQMetadata) (eqmac.EQPreset, error)
}

// compile time interface implementation check.
var _ Mapper = AutoEQMapper{}

// AutoEQMapper is an implementation of the Mapper interface.
// It maps autoeq FixedBandEQs into eqmac Presets.
type AutoEQMapper struct {
	gen UUIDGenerator
}

// NewAutoEQMapper returns a new AutoEQMapper that uses the input UUID Generator.
func NewAutoEQMapper(gen UUIDGenerator) AutoEQMapper {
	return AutoEQMapper{
		gen: gen,
	}
}

// MapFixedBand maps fixed bands EQ data into an EqMac preset.
// Returns an error if any.
func (m AutoEQMapper) MapFixedBand(fbeq *autoeq.FixedBandEQ, meta *autoeq.EQMetadata) (eqmac.EQPreset, error) {
	var preset eqmac.EQPreset
	preset.ID = m.gen.UUID()
	preset.IsDefault = false
	preset.Name = meta.Name
	preset.Gains = eqmac.Gains{
		Global: fbeq.Preamp,
		Bands:  []float64{},
	}
	bands := []float64{}
	for _, band := range fbeq.Filters {
		bands = append(bands, band.Gain)
	}
	preset.Gains.Bands = bands

	return preset, nil
}
